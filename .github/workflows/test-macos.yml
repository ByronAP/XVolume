name: Test macOS

on:
 workflow_call:
   inputs:
     runs-on:
       required: false
       type: string
       default: 'macos-latest'
     dotnet-version:
       required: false
       type: string
       default: '9.0.x'
 workflow_dispatch:
   inputs:
     runs-on:
       description: 'macOS runner version'
       required: false
       type: choice
       default: 'macos-latest'
       options:
         - macos-latest
         - macos-13
         - macos-12

jobs:
 test-unit:
   name: Unit Tests - macOS
   runs-on: ${{ inputs.runs-on || 'macos-latest' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run Unit Tests
     run: dotnet test --configuration Release --no-build --filter "Category=Unit" --logger "trx;LogFileName=macos-unit.trx" --logger "console;verbosity=detailed" --results-directory ./TestResults

   - name: Upload Unit Test Results
     uses: actions/upload-artifact@v3
     if: always()
     with:
       name: test-results-unit-macos
       path: TestResults/*.trx

 test-integration:
   name: Integration Tests - macOS
   runs-on: ${{ inputs.runs-on || 'macos-latest' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Check Audio System
     run: |
       echo "=== macOS Audio System Information ==="
       # Check system audio
       system_profiler SPAudioDataType || true
       
       # Check CoreAudio
       echo "=== CoreAudio Status ==="
       sudo launchctl list | grep -i audio || true
       
       # Test osascript availability
       echo "=== Testing osascript ==="
       osascript -e 'get volume settings' || echo "osascript volume command failed"
       
       # Check for audio devices
       echo "=== Audio Devices ==="
       system_profiler SPAudioDataType | grep "Device ID" || echo "No audio devices found"

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run macOS Integration Tests
     run: |
       # Run integration tests, don't fail build if audio isn't available
       dotnet test --configuration Release --no-build \
         --filter "Category=Integration&Category=MacOS" \
         --logger "trx;LogFileName=macos-integration.trx" \
         --logger "console;verbosity=detailed" \
         --results-directory ./TestResults || echo "Integration tests completed with errors"
     continue-on-error: true

   - name: Upload Integration Test Results
     uses: actions/upload-artifact@v3
     if: always()
     with:
       name: test-results-integration-macos
       path: TestResults/*.trx

 test-factory:
   name: Factory Tests - macOS
   runs-on: ${{ inputs.runs-on || 'macos-latest' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run Factory Tests
     run: |
       dotnet test --configuration Release --no-build \
         --filter "FullyQualifiedName~VolumeSubsystemFactoryTests" \
         --logger "trx;LogFileName=macos-factory.trx" \
         --logger "console;verbosity=detailed" \
         --results-directory ./TestResults

   - name: Upload Factory Test Results
     uses: actions/upload-artifact@v3
     if: always()
     with:
       name: test-results-factory-macos
       path: TestResults/*.trx

 test-sample:
   name: Sample App Test - macOS
   runs-on: ${{ inputs.runs-on || 'macos-latest' }}
   if: ${{ github.event_name == 'workflow_dispatch' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Build Sample App
     run: |
       cd samples/
       dotnet build --configuration Release

   - name: Test Sample App
     run: |
       cd samples/
       echo "=== Running Sample App ==="
       # Run with timeout in case it hangs
       timeout 30s dotnet run --configuration Release --no-build || echo "Sample app test completed"
     continue-on-error: true

 summary:
   name: macOS Test Summary
   runs-on: ubuntu-latest
   needs: [test-unit, test-integration, test-factory]
   if: always()
   
   steps:
   - name: Download all test results
     uses: actions/download-artifact@v4
     with:
       path: test-results

   - name: Display test results
     run: |
       echo "=== macOS Test Results Summary ==="
       find test-results -name "*.trx" -type f | while read file; do
         echo "Found test result: $file"
       done

   - name: Check for failures
     run: |
       if grep -r "outcome=\"Failed\"" test-results/*.trx 2>/dev/null; then
         echo "::warning::Some macOS tests failed. Check the test results for details."
       else
         echo "::notice::All macOS tests passed!"
       fi