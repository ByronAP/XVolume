name: Test macOS (Reusable)

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'The runner to use for the jobs (e.g., macos-latest)'
        required: false
        type: string
        default: 'macos-latest'
      dotnet-version:
        description: 'The .NET version to install'
        required: false
        type: string
        default: '9.0.x'

permissions:
  contents: read
  actions: read

jobs:
  test-unit:
    name: Unit Tests - macOS
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run Unit Tests
      run: dotnet test --configuration Release --no-build --filter "Category=Unit" --logger "trx;LogFileName=macos-unit.trx" --results-directory ./TestResults

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-unit-macos
        path: TestResults/*.trx

  test-integration:
    name: Integration Tests - macOS
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Check Audio System
      run: |
        echo "=== macOS Audio System Information ==="
        system_profiler SPAudioDataType || true
        echo "=== Testing osascript ==="
        osascript -e 'get volume settings' || echo "osascript volume command failed"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run macOS Integration Tests
      run: dotnet test --configuration Release --no-build --filter "Category=Integration&Category=MacOS" --logger "trx;LogFileName=macos-integration.trx" --results-directory ./TestResults
      continue-on-error: true

    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-integration-macos
        path: TestResults/*.trx

  test-factory:
    name: Factory Tests - macOS
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run Factory Tests
      run: dotnet test --configuration Release --no-build --filter "FullyQualifiedName~VolumeSubsystemFactoryTests" --logger "trx;LogFileName=macos-factory.trx" --results-directory ./TestResults

    - name: Upload Factory Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-factory-macos
        path: TestResults/*.trx

  test-sample:
    name: Sample App Test - macOS
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Build Sample App
      run: dotnet build --configuration Release
      working-directory: samples/

    - name: Test Sample App
      run: timeout 30s dotnet run --project . --configuration Release --no-build || echo "Sample app test completed"
      working-directory: samples/
      continue-on-error: true

  summary:
    name: macOS Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [test-unit, test-integration, test-factory, test-sample]
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Check for failures
      run: |
        echo "### macOS Test Results Summary" >> $GITHUB_STEP_SUMMARY
        if grep -r -l "outcome=\"Failed\"" test-results; then
          echo "ðŸ”´ Some macOS tests failed. Check the artifacts for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "âœ… All macOS tests passed!" >> $GITHUB_STEP_SUMMARY
        fi