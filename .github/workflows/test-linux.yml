name: Test Linux

on:
 workflow_call:
   inputs:
     runs-on:
       required: false
       type: string
       default: 'ubuntu-latest'
     dotnet-version:
       required: false
       type: string
       default: '9.0.x'
 workflow_dispatch:
   inputs:
     runs-on:
       description: 'Linux runner version'
       required: false
       type: choice
       default: 'ubuntu-latest'
       options:
         - ubuntu-latest
         - ubuntu-22.04
         - ubuntu-20.04
     audio-system:
       description: 'Audio system to test'
       required: false
       type: choice
       default: 'all'
       options:
         - all
         - alsa
         - pulseaudio
         - pipewire

jobs:
 test-unit:
   name: Unit Tests - Linux
   runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run Unit Tests
     run: dotnet test --configuration Release --no-build --filter "Category=Unit" --logger "trx;LogFileName=linux-unit.trx" --logger "console;verbosity=detailed" --results-directory ./TestResults

   - name: Upload Unit Test Results
     uses: actions/upload-artifact@v4
     if: always()
     with:
       name: test-results-unit-linux
       path: TestResults/*.trx

 test-integration-alsa:
   name: Integration Tests - Linux ALSA
   runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
   if: ${{ github.event.inputs.audio-system == 'all' || github.event.inputs.audio-system == 'alsa' || github.event.inputs.audio-system == '' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Install ALSA
     run: |
       echo "=== Installing ALSA ==="
       sudo apt-get update
       sudo apt-get install -y alsa-utils alsa-base libasound2 libasound2-plugins
       
       # Create dummy ALSA configuration for testing
       mkdir -p ~/.config/alsa
       echo "pcm.!default { type null }" > ~/.asoundrc
       echo "ctl.!default { type null }" >> ~/.asoundrc
       
       # Check ALSA installation
       echo "=== ALSA Version ==="
       amixer --version || echo "amixer not available"
       
       # List ALSA devices (will likely be empty in CI)
       echo "=== ALSA Devices ==="
       aplay -l || echo "No ALSA playback devices"
       
       # Check ALSA cards
       echo "=== ALSA Cards ==="
       cat /proc/asound/cards || echo "No sound cards"

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run ALSA Integration Tests
     run: |
       export AUDIO_SYSTEM=alsa
       dotnet test --configuration Release --no-build \
         --filter "Category=Integration&Category=Linux" \
         --logger "trx;LogFileName=linux-alsa-integration.trx" \
         --logger "console;verbosity=detailed" \
         --results-directory ./TestResults || echo "ALSA integration tests completed with errors"
     continue-on-error: true

   - name: Upload ALSA Test Results
     uses: actions/upload-artifact@v4
     if: always()
     with:
       name: test-results-integration-linux-alsa
       path: TestResults/*.trx

 test-integration-pulseaudio:
   name: Integration Tests - Linux PulseAudio
   runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
   if: ${{ github.event.inputs.audio-system == 'all' || github.event.inputs.audio-system == 'pulseaudio' || github.event.inputs.audio-system == '' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Install PulseAudio
     run: |
       echo "=== Installing PulseAudio ==="
       sudo apt-get update
       sudo apt-get install -y pulseaudio pulseaudio-utils
       
       # Try to start PulseAudio in system mode (may not work in CI)
       echo "=== Starting PulseAudio ==="
       pulseaudio --start --log-target=syslog --system=false --disallow-exit || echo "Failed to start PulseAudio"
       
       # Check PulseAudio status
       echo "=== PulseAudio Status ==="
       pactl info || echo "PulseAudio not running"
       
       # List sinks
       echo "=== PulseAudio Sinks ==="
       pactl list sinks || echo "No sinks available"
       
       # Check version
       echo "=== PulseAudio Version ==="
       pactl --version

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run PulseAudio Integration Tests
     run: |
       export AUDIO_SYSTEM=pulseaudio
       dotnet test --configuration Release --no-build \
         --filter "Category=Integration&Category=Linux" \
         --logger "trx;LogFileName=linux-pulseaudio-integration.trx" \
         --logger "console;verbosity=detailed" \
         --results-directory ./TestResults || echo "PulseAudio integration tests completed with errors"
     continue-on-error: true

   - name: Upload PulseAudio Test Results
     uses: actions/upload-artifact@v4
     if: always()
     with:
       name: test-results-integration-linux-pulseaudio
       path: TestResults/*.trx

 test-integration-pipewire:
   name: Integration Tests - Linux PipeWire
   runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
   if: ${{ github.event.inputs.audio-system == 'all' || github.event.inputs.audio-system == 'pipewire' || github.event.inputs.audio-system == '' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Install PipeWire
     run: |
       echo "=== Installing PipeWire ==="
       sudo apt-get update
       sudo apt-get install -y pipewire pipewire-pulse pipewire-audio-client-libraries libspa-0.2-modules
       
       # Check PipeWire installation
       echo "=== PipeWire Version ==="
       pipewire --version || echo "PipeWire not installed"
       
       # Try to start PipeWire (likely won't work in CI without systemd)
       echo "=== PipeWire Status ==="
       systemctl --user status pipewire || echo "PipeWire service not available"
       
       # Check if PulseAudio compatibility is available
       echo "=== PipeWire PulseAudio Compatibility ==="
       pactl info 2>/dev/null | grep "Server Name" || echo "PulseAudio compatibility not available"

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run PipeWire Integration Tests
     run: |
       export AUDIO_SYSTEM=pipewire
       dotnet test --configuration Release --no-build \
         --filter "Category=Integration&Category=Linux" \
         --logger "trx;LogFileName=linux-pipewire-integration.trx" \
         --logger "console;verbosity=detailed" \
         --results-directory ./TestResults || echo "PipeWire integration tests completed with errors"
     continue-on-error: true

   - name: Upload PipeWire Test Results
     uses: actions/upload-artifact@v4
     if: always()
     with:
       name: test-results-integration-linux-pipewire
       path: TestResults/*.trx

 test-factory:
   name: Factory Tests - Linux
   runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Install All Audio Systems
     run: |
       echo "=== Installing all Linux audio systems ==="
       sudo apt-get update
       sudo apt-get install -y \
         alsa-utils alsa-base \
         pulseaudio pulseaudio-utils \
         pipewire pipewire-pulse
       
       # Create dummy ALSA config
       echo "pcm.!default { type null }" > ~/.asoundrc
       echo "ctl.!default { type null }" >> ~/.asoundrc

   - name: Restore dependencies
     run: dotnet restore

   - name: Build
     run: dotnet build --configuration Release --no-restore

   - name: Run Factory Tests
     run: |
       dotnet test --configuration Release --no-build \
         --filter "FullyQualifiedName~VolumeSubsystemFactoryTests" \
         --logger "trx;LogFileName=linux-factory.trx" \
         --logger "console;verbosity=detailed" \
         --results-directory ./TestResults

   - name: Upload Factory Test Results
     uses: actions/upload-artifact@v4
     if: always()
     with:
       name: test-results-factory-linux
       path: TestResults/*.trx

 test-sample:
   name: Sample App Test - Linux
   runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
   if: ${{ github.event_name == 'workflow_dispatch' }}
   
   steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup .NET
     uses: actions/setup-dotnet@v4
     with:
       dotnet-version: ${{ inputs.dotnet-version || '9.0.x' }}

   - name: Install Audio Systems
     run: |
       sudo apt-get update
       sudo apt-get install -y alsa-utils pulseaudio
       echo "pcm.!default { type null }" > ~/.asoundrc

   - name: Build Sample App
     run: |
       cd samples/
       dotnet build --configuration Release

   - name: Test Sample App
     run: |
       cd samples/
       echo "=== Running Sample App ==="
       timeout 30s dotnet run --configuration Release --no-build || echo "Sample app test completed"
     continue-on-error: true

 summary:
   name: Linux Test Summary
   runs-on: ubuntu-latest
   needs: [test-unit, test-integration-alsa, test-integration-pulseaudio, test-integration-pipewire, test-factory]
   if: always()
   
   steps:
   - name: Download all test results
     uses: actions/download-artifact@v3
     with:
       path: test-results

   - name: Display test results
     run: |
       echo "=== Linux Test Results Summary ==="
       find test-results -name "*.trx" -type f | while read file; do
         echo "Found test result: $file"
       done

   - name: Check for failures
     run: |
       if grep -r "outcome=\"Failed\"" test-results/*.trx 2>/dev/null; then
         echo "::warning::Some Linux tests failed. Check the test results for details."
       else
         echo "::notice::All Linux tests passed!"
       fi