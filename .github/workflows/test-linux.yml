name: Test Linux (Reusable)

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'The runner to use for the jobs (e.g., ubuntu-latest)'
        required: false
        type: string
        default: 'ubuntu-latest'
      dotnet-version:
        description: 'The .NET version to install'
        required: false
        type: string
        default: '9.0.x'
      audio-system:
        description: 'Which audio system integration tests to run'
        required: false
        type: string
        default: 'all'

permissions:
  contents: read
  actions: read

jobs:
  test-unit:
    name: Unit Tests - Linux
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run Unit Tests
      run: dotnet test --configuration Release --no-build --filter "Category=Unit" --logger "trx;LogFileName=linux-unit.trx" --results-directory ./TestResults

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-unit-linux
        path: TestResults/*.trx

  test-integration-alsa:
    name: Integration Tests - Linux ALSA
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.audio-system == 'all' || inputs.audio-system == 'alsa' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install ALSA
      run: |
        sudo apt-get update
        sudo apt-get install -y alsa-utils libasound2
        echo "pcm.!default { type null }" > ~/.asoundrc
        echo "ctl.!default { type null }" >> ~/.asoundrc

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run ALSA Integration Tests
      run: dotnet test --configuration Release --no-build --filter "Category=Integration&Category=Linux" --logger "trx;LogFileName=linux-alsa-integration.trx" --results-directory ./TestResults
      continue-on-error: true

    - name: Upload ALSA Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-integration-linux-alsa
        path: TestResults/*.trx

  test-integration-pulseaudio:
    name: Integration Tests - Linux PulseAudio
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.audio-system == 'all' || inputs.audio-system == 'pulseaudio' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install PulseAudio
      run: |
        sudo apt-get update
        sudo apt-get install -y pulseaudio pulseaudio-utils
        pulseaudio --start --log-target=syslog --system=false --disallow-exit || echo "Failed to start PulseAudio"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run PulseAudio Integration Tests
      run: dotnet test --configuration Release --no-build --filter "Category=Integration&Category=Linux" --logger "trx;LogFileName=linux-pulseaudio-integration.trx" --results-directory ./TestResults
      continue-on-error: true

    - name: Upload PulseAudio Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-integration-linux-pulseaudio
        path: TestResults/*.trx

  test-integration-pipewire:
    name: Integration Tests - Linux PipeWire
    runs-on: ${{ inputs.runs-on }}
    if: ${{ inputs.audio-system == 'all' || inputs.audio-system == 'pipewire' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install PipeWire
      run: |
        sudo apt-get update
        sudo apt-get install -y pipewire pipewire-pulse

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run PipeWire Integration Tests
      run: dotnet test --configuration Release --no-build --filter "Category=Integration&Category=Linux" --logger "trx;LogFileName=linux-pipewire-integration.trx" --results-directory ./TestResults
      continue-on-error: true

    - name: Upload PipeWire Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-integration-linux-pipewire
        path: TestResults/*.trx

  test-factory:
    name: Factory Tests - Linux
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install All Audio Systems
      run: |
        sudo apt-get update && sudo apt-get install -y alsa-utils pulseaudio pipewire-pulse
        echo "pcm.!default { type null }" > ~/.asoundrc
        echo "ctl.!default { type null }" >> ~/.asoundrc

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run Factory Tests
      run: dotnet test --configuration Release --no-build --filter "FullyQualifiedName~VolumeSubsystemFactoryTests" --logger "trx;LogFileName=linux-factory.trx" --results-directory ./TestResults

    - name: Upload Factory Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-factory-linux
        path: TestResults/*.trx

  test-sample:
    name: Sample App Test - Linux
    runs-on: ${{ inputs.runs-on }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install Audio Systems
      run: |
        sudo apt-get update
        sudo apt-get install -y alsa-utils pulseaudio
        echo "pcm.!default { type null }" > ~/.asoundrc

    - name: Build Sample App
      run: dotnet build --configuration Release samples/

    - name: Test Sample App
      run: timeout 30s dotnet run --project samples/ --configuration Release --no-build || echo "Sample app test completed"
      continue-on-error: true

  summary:
    name: Linux Test Summary
    # This job runs on a standard runner, it doesn't need to match the test runners.
    runs-on: ubuntu-latest
    # It must run after all other jobs, even if they fail.
    if: always()
    needs: [test-unit, test-integration-alsa, test-integration-pulseaudio, test-integration-pipewire, test-factory, test-sample]
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Check for failures
      run: |
        echo "### Linux Test Results Summary" >> $GITHUB_STEP_SUMMARY
        if grep -r -l "outcome=\"Failed\"" test-results; then
          echo "ðŸ”´ Some Linux tests failed. Check the artifacts for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "âœ… All Linux tests passed!" >> $GITHUB_STEP_SUMMARY
        fi